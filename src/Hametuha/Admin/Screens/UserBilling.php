<?php

namespace Hametuha\Admin\Screens;


use Hametuha\Admin\Table\UserBillingTable;
use Hametuha\Model\Sales;
use Hametuha\Model\UserSales;
use WPametu\UI\Admin\Screen;


/**
 * Sales report screen
 *
 * @package Hametuha\Admin\Screens
 * @property-read UserSales $user_sales
 */
class UserBilling extends Screen {

	protected $menu_title = '支払い履歴';

	protected $title = '支払履歴';

	protected $slug = 'hametuha-user-billing';

	protected $parent = 'users.php';

	protected $caps = 'manage_options';

	/**
	 * Admin init
	 */
	public function adminInit() {
		add_action( 'wp_ajax_user_billing', [ $this, 'ajax' ] );
	}

	/**
	 * 決済を処理済にする
	 */
	public function ajax() {
		try {
			if ( ! $this->input->verify_nonce( 'update_billing' ) ) {
				throw new \Exception( '不正なアクセスです。', 401 );
			}
			if ( ! ( $done = $this->user_sales->fix_billing( $this->input->post( 'user_ids' ) ) ) ) {
				throw new \Exception( '該当する決済はありませんでした。', 404 );
			}
			$json = [
				'success' => true,
			    'message' => sprintf( '%d件を処理済みにしました。リロードします。', $done ),
			];
		} catch ( \Exception $e ) {
			$json = [
				'success' => false,
				'message' => $e->getMessage(),
			];
		}
		wp_send_json( $json );
	}

	/**
	 * Load templates
	 */
	protected function content() {
		printf( '<form action="%s" method="get">', admin_url( 'users.php' ) );
		echo <<<HTML
			<input type="hidden" name="page" value="{$this->slug}" />
HTML;
		$table = new UserBillingTable();
		$table->prepare_items();
		$table->views();
		$table->search_box( '検索', 's' );
		ob_start();
		$table->display();
		$content = preg_replace( '/<input[^>]+_wp_http_referer[^>]+>/u', '', ob_get_contents() );
		ob_end_clean();
		echo $content;
		echo '</form>';
		// 更新要スクリプト
		$endpoint = admin_url( 'admin-ajax.php' );
		$nonce    = wp_create_nonce( 'update_billing' );
		echo <<<HTML
<script>
jQuery(document).ready(function($){
    $('#doaction,#doaction2').click(function(e){
        e.preventDefault();
        if ( 'update' !== $(this).prev('select').val() ) {
            return false;
        }
        var ids = [];
        $('.billing-user:checked').each(function( index, input ){
            ids.push( $(input).val() );
        });
        if ( ! ids.length ) {
            return false;
        }
        
        $.post( '{$endpoint}', {
          _wpnonce: '{$nonce}',
          action: 'user_billing',
          user_ids: ids
        } ).done(function(result){
          alert(result.message);
          if(result.success){
            window.location.reload();
          }
        }).fail(function(){
            alert( 'エラーが発生しました。' );
        });
    });
});
</script>
HTML;

	}


	/**
	 * Getter
	 *
	 * @param string $name
	 *
	 * @return mixed
	 */
	public function __get( $name ) {
		switch ( $name ) {
			case 'user_sales':
				return UserSales::get_instance();
				break;
			default:
				return parent::__get( $name ); // TODO: Change the autogenerated stub
				break;
		}
	}


}
