<?php

namespace Hametuha\Admin\Fields;


use WPametu\UI\Field\Select;

/**
 * プルダウンのデータ元を連載でオーバーライドする
 *
 * @package hametuha
 */
class MetaboxFieldSeries extends Select {

	/**
	 * @var int 他の作品集を指定されていた場合
	 */
	protected $fixed_parent = 0;

	protected function parse_args( array $setting ) {
		return parent::parse_args( $setting ); // TODO: Change the autogenerated stub
	}

	/**
	 * {@inheritDoc}
	 */
	protected function get_data( \WP_Post $post ) {
		switch ( $this->name ) {
			case 'post_parent':
				return $post->post_parent;
			default:
				return get_post_meta( $post->ID, $this->name, true );
		}
	}

	/**
	 * {@inheritDoc}
	 */
	protected function test_setting( array $setting = array() ) {
		// Do nothing.
	}

	/**
	 * {@inheritDoc}
	 */
	protected function build_input( $data, array $fields = array() ) {
		if ( ! $this->user_editable( $data ) ) {
			$this->fixed_parent = $data;
		}
		return parent::build_input( $data, $fields ); // TODO: Change the autogenerated stub
	}

	/**
	 * {@inheritDoc}
	 */
	protected function render_row( $label, $required, $input, $desc, \WP_Post $post ) {
		if ( $this->fixed_parent ) {
			$desc = sprintf( '<p class="description" style="color: red;">%s</p>', esc_html__( 'この投稿は編集者によって作品集に紐づけられているため、変更できません。', 'hametuha' ) );
		}
		return parent::render_row( $label, $required, $input, $desc, $post );
	}


	/**
	 * ユーザーはシリーズを変更できるか？
	 *
	 * @param mixed $data このフィールドのデータ
	 * @return bool
	 */
	protected function user_editable( $data ) {
		if ( ! $data ) {
			return true;
		}
		if ( current_user_can( 'edit_others_posts' ) ) {
			return true;
		}
		// 著者はシリーズを所有していないが、編集者によって割り当てられている。
		$post = get_post( $data );
		if ( ! $post ) {
			return true;
		}
		return current_user_can( 'edit_post', $post->ID );
	}

	/**
	 * 投稿の場合は変更しなくてよい？
	 *
	 * @param string $value
	 * @param \WP_Post|null $post 投稿
	 * @return void
	 */
	protected function save( $value, \WP_Post $post = null ) {
		switch ( $this->name ) {
			case 'post_parent':
				// Do nothing.
				break;
			default:
				parent::save( $value, $post );
				break;
		}
	}

	/**
	 * シリーズを返す
	 *
	 * @return string[]
	 */
	protected function get_options() {
		$options = [
			0 => 'なし',
		];
		$args = [
			'post_type'      => 'series',
			'posts_per_page' => 200,
			'orderby'        => [ 'date' => 'DESC' ],
			'post_status'    => 'any',
			'meta_query'     => [
				[
					'key'     => '_stale',
					'compare' => 'NOT EXISTS',
				],
			],
		];
		if ( current_user_can( 'edit_others_posts' ) ) {
			$args['posts_per_page'] = 1000;
		} else {
			if ( $this->fixed_parent ) {
				// 自分が所有していない投稿が割り当てられている場合は他の選択肢をなくす
				$args['p'] = $this->fixed_parent;
				$options   = [];
			} else {
				// 自分の所有している投稿のみを表示
				$args['author'] = get_current_user_id();
			}
		}
		$posts = get_posts( $args );
		foreach ( $posts as $post ) {
			$options[ $post->ID ] = $post->post_title;
		}
		return $options;
	}
}
