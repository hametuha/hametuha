{"version":3,"sources":["hashboard/stats-pv.js"],"names":["$","Vue","el","data","now","Date","year","getFullYear","month","getMonth","slice","loading","from","join","to","hbGetLastDateOfMonth","rankings","records","chartData","options","responsive","maintainAspectRatio","tooltips","enabled","mode","callbacks","label","tooltipItems","yLabel","datasets","datasetIndex","scales","yAxes","stacked","computed","mounted","this","fetch","methods","filledLabels","start","end","labels","setDate","getDate","push","skeleton","length","array","i","dateChangeHandler","fillDataSet","dataSets","type","date","pv","index","indexOf","self","hbRest","attr","done","response","curRank","j","l","rank","data_sets","each","record","post_type","colors","colorIndex","prop","hasOwnProperty","color","lineTension","backgroundColor","borderColor","fail","hbRestError","always","jQuery"],"mappings":"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","file":"../../hashboard/stats-pv.js","sourcesContent":["/*!\n * wpdeps=hashboard,hb-components-bar-chart,hb-components-month-selector, hb-plugins-date\n */\n\n/*global Vue: true*/\n\n(function ($) {\n\n  'use strict';\n\n  var app = new Vue({\n    el: '#access-container',\n    data: function () {\n      var now = new Date();\n      var year = now.getFullYear();\n      var month = ( '0' + ( now.getMonth() + 1 ) ).slice(-2);\n      return {\n        loading: false,\n        from: [year, month, '01'].join('-'),\n        to: [year, month, $.hbGetLastDateOfMonth(year, month)].join('-'),\n        rankings: [],\n        records: [],\n        chartData: {},\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            enabled: true,\n            mode: 'index',\n            callbacks: {\n              label: function (tooltipItems, data) {\n                return tooltipItems.yLabel + 'PV（' + data.datasets[tooltipItems.datasetIndex].label + '）';\n              }\n            }\n          },\n          scales: {\n            yAxes: [{\n              stacked: true\n            }]\n          }\n        }\n      }\n    },\n    computed: {},\n\n    mounted: function () {\n      this.fetch();\n    },\n    methods: {\n      filledLabels: function (from, to) {\n        var start = new Date(from);\n        var end = new Date(to);\n        var labels = [];\n        for (; start <= end; start.setDate(start.getDate() + 1)) {\n          labels.push(start.getFullYear() + '-' + ('0' + (start.getMonth() + 1)).slice(-2) + '-' + ('0' + start.getDate()).slice(-2));\n        }\n        return labels;\n      },\n\n      /**\n       * Get empty label\n       *\n       * @param length\n       * @returns {Array}\n       */\n      skeleton: function (length) {\n        var array = [];\n        for (var i = 0; i < length; i++) {\n          array.push(0);\n        }\n        return array;\n      },\n\n      dateChangeHandler: function (year, month) {\n        month = ('0' + month).slice(-2);\n        this.from = [year, month, '01'].join('-');\n        this.to   = [year, month, $.hbGetLastDateOfMonth(year, month)].join('-');\n        this.fetch();\n      },\n\n      fillDataSet: function (dataSets, labels, type, date, pv) {\n        if (!dataSets[type]) {\n          dataSets[type] = this.skeleton(labels.length);\n        }\n        var index = labels.indexOf(date);\n        if (index > -1) {\n          dataSets[type][index] += pv;\n        }\n      },\n\n      fetch: function () {\n        this.loading = true;\n        var self = this;\n        $.hbRest('GET', $('#access-container').attr('data-endpoint'), {\n          from: this.from,\n          to: this.to\n        }).done(function (response) {\n          // Set ranking\n          var rankings = [];\n          var curRank, j;\n          for (var i = 0, l = response.rankings.length; i < l; i++) {\n            curRank = 0;\n            for (j = 0; j < l; j++) {\n              if (response.rankings[j].pv > response.rankings[i].pv) {\n                curRank++;\n              } else {\n                break;\n              }\n            }\n            response.rankings[i].rank = curRank + 1;\n          }\n          self.rankings = response.rankings;\n          // Create graph\n          var chartData = {};\n          var labels = self.filledLabels(response.start, response.end);\n          var data_sets = {};\n          $.each(response.records, function (index, record) {\n            self.fillDataSet(data_sets, labels, record.post_type, record.date, record.pv);\n          });\n\n          chartData.labels = labels;\n          chartData.datasets = [];\n          var colors = [\n            [255, 12, 62],\n            [0, 153, 232],\n            [247, 124, 0],\n            [95, 125, 140],\n            [52, 143, 55],\n            [255, 59, 0],\n            [124, 19, 164],\n            [68, 90, 101],\n            [0, 184, 214],\n            [110, 76, 64]\n          ];\n          var colorIndex = 0;\n          for (var prop in data_sets) {\n            if (!data_sets.hasOwnProperty(prop)) {\n              continue;\n            }\n            var color = colors[colorIndex].join(', ');\n            chartData.datasets.push({\n              type: 'line',\n              lineTension: 0,\n              label: prop,\n              data: data_sets[prop],\n              backgroundColor: 'rgb(' + color + ')',\n              borderColor: 'rgba(' + color + ', .6)'\n            });\n            colorIndex++;\n          }\n          self.chartData = chartData;\n          self.records = response.records;\n        }).fail($.hbRestError()).always(function () {\n          self.loading = false;\n        })\n      }\n    }\n  });\n\n\n})(jQuery);\n"]}