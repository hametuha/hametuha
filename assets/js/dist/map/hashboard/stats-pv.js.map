{"version":3,"sources":["hashboard/stats-pv.js"],"names":["$","Vue","el","data","loading","from","to","rankings","records","chartData","options","responsive","maintainAspectRatio","tooltips","enabled","mode","callbacks","label","tooltipItems","yLabel","datasets","datasetIndex","scales","yAxes","stacked","computed","mounted","this","fetch","methods","filledLabels","start","Date","end","labels","setDate","getDate","push","getFullYear","getMonth","slice","skeleton","length","array","i","fillDataSet","dataSets","type","date","pv","index","indexOf","self","hbRest","attr","done","response","curRank","j","l","rank","data_sets","each","record","post_type","colors","colorIndex","prop","hasOwnProperty","color","join","lineTension","backgroundColor","borderColor","fail","hbRestError","always","jQuery"],"mappings":"CAMA,SAAWA,GAET,YAEU,IAAIC,MACZC,GAAI,oBACJC,MACEC,SAAS,EACTC,KAAM,aACNC,GAAI,aACJC,YACAC,WACAC,aAEAC,SACEC,YAAY,EACZC,qBAAqB,EACrBC,UACEC,SAAS,EACTC,KAAM,QACNC,WACEC,MAAO,SAAUC,EAAcf,GAC7B,MAAOe,GAAaC,OAAS,MAAQhB,EAAKiB,SAASF,EAAaG,cAAcJ,MAAQ,OAI5FK,QACEC,QACEC,SAAS,OAKjBC,YAGAC,QAAS,WACPC,KAAKC,SAEPC,SAEEC,aAAc,SAAUzB,EAAMC,GAI5B,IAHA,GAAIyB,GAAQ,GAAIC,MAAK3B,GACjB4B,EAAQ,GAAID,MAAK1B,GACjB4B,KACGH,GAASE,EAAKF,EAAMI,QAAQJ,EAAMK,UAAY,GACnDF,EAAOG,KAAMN,EAAMO,cAAgB,KAAO,KAAOP,EAAMQ,WAAa,IAAIC,UAAY,KAAO,IAAMT,EAAMK,WAAWI,UAEpH,OAAON,IASTO,SAAU,SAASC,GAEjB,IAAI,GADAC,MACIC,EAAI,EAAGA,EAAIF,EAAQE,IACzBD,EAAMN,KAAK,EAEb,OAAOM,IAGTE,YAAa,SAASC,EAAUZ,EAAQa,EAAMC,EAAMC,GAC3CH,EAASC,KACdD,EAASC,GAAQpB,KAAKc,SAAUP,EAAOQ,QAEzC,IAAIQ,GAAQhB,EAAOiB,QAAQH,EACtBE,QACHJ,EAASC,GAAMG,IAAUD,IAI7BrB,MAAO,WACLD,KAAKvB,SAAU,CACf,IAAIgD,GAAOzB,IACX3B,GAAEqD,OAAO,MAAOrD,EAAE,qBAAqBsD,KAAK,kBAC1CjD,KAAMsB,KAAKtB,KACXC,GAAIqB,KAAKrB,KACPiD,KAAK,SAASC,GAIhB,IAAM,GADFC,GAASC,EACHd,EAAI,EAAGe,EAAIH,EAASjD,SAASmC,OAAQE,EAAIe,EAAGf,IAAI,CAExD,IADAa,EAAU,EACJC,EAAI,EAAGA,EAAIC,GACVH,EAASjD,SAASmD,GAAGT,GAAKO,EAASjD,SAASqC,GAAGK,GADlCS,IAEhBD,GAKJD,GAASjD,SAASqC,GAAGgB,KAAOH,EAAU,EAExCL,EAAK7C,SAAWiD,EAASjD,QAEzB,IAAIE,MACAyB,EAASkB,EAAKtB,aAAc0B,EAASzB,MAAOyB,EAASvB,KACrD4B,IACJ7D,GAAE8D,KAAMN,EAAShD,QAAS,SAAS0C,EAAOa,GACxCX,EAAKP,YAAYgB,EAAW3B,EAAQ6B,EAAOC,UAAWD,EAAOf,KAAMe,EAAOd,MAG5ExC,EAAUyB,OAASA,EACnBzB,EAAUW,WACV,IAAI6C,KACD,IAAK,GAAI,KACT,EAAG,IAAK,MACR,IAAK,IAAK,IACV,GAAI,IAAK,MACT,GAAI,IAAK,KACT,IAAK,GAAI,IACT,IAAK,GAAI,MACT,GAAI,GAAI,MACR,EAAG,IAAK,MACR,IAAK,GAAI,KAERC,EAAa,CACjB,KAAI,GAAIC,KAAQN,GACd,GAAIA,EAAUO,eAAeD,GAA7B,CAGA,GAAIE,GAAQJ,EAAOC,GAAYI,KAAK,KACpC7D,GAAUW,SAASiB,MACjBU,KAAM,OACNwB,YAAa,EACbtD,MAAOkD,EACPhE,KAAM0D,EAAUM,GAChBK,gBAAiB,OAASH,EAAQ,IAClCI,YAAa,QAAUJ,EAAQ,UAEjCH,IAEFd,EAAK3C,UAAYA,EACjB2C,EAAK5C,QAAUgD,EAAShD,UACvBkE,KAAK1E,EAAE2E,eAAeC,OAAO,WAC9BxB,EAAKhD,SAAU,SAOtByE","file":"../../hashboard/stats-pv.js","sourcesContent":["/**\n * Description\n */\n\n/*global Vue: true*/\n\n(function ($) {\n\n  'use strict';\n\n  var app = new Vue({\n    el: '#access-container',\n    data: {\n      loading: false,\n      from: '2017-10-01',\n      to: '2017-10-31',\n      rankings: [],\n      records: [],\n      chartData: {\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true,\n          mode: 'index',\n          callbacks: {\n            label: function (tooltipItems, data) {\n              return tooltipItems.yLabel + 'PV（' + data.datasets[tooltipItems.datasetIndex].label + '）';\n            }\n          }\n        },\n        scales: {\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    },\n    computed: {\n    },\n\n    mounted: function(){\n      this.fetch();\n    },\n    methods: {\n\n      filledLabels: function( from, to ) {\n        var start = new Date(from);\n        var end   = new Date(to);\n        var labels = [];\n        for (; start <= end; start.setDate(start.getDate() + 1)) {\n          labels.push( start.getFullYear() + '-' + ('0' + (start.getMonth() + 1)).slice(-2) + '-' + ('0' + start.getDate()).slice(-2));\n        }\n        return labels;\n      },\n\n      /**\n       * Get empty label\n       *\n       * @param length\n       * @returns {Array}\n       */\n      skeleton: function(length) {\n        var array = [];\n        for(var i = 0; i < length; i++) {\n          array.push(0);\n        }\n        return array;\n      },\n\n      fillDataSet: function(dataSets, labels, type, date, pv) {\n        if ( ! dataSets[type] ) {\n          dataSets[type] = this.skeleton( labels.length );\n        }\n        var index = labels.indexOf(date);\n        if ( index > -1 ) {\n          dataSets[type][index] += pv;\n        }\n      },\n\n      fetch: function() {\n        this.loading = true;\n        var self = this;\n        $.hbRest('GET', $('#access-container').attr('data-endpoint'), {\n          from: this.from,\n          to: this.to\n        } ).done(function(response){\n          // Set ranking\n          var rankings = [];\n          var curRank, j;\n          for ( var i = 0, l = response.rankings.length; i < l; i++){\n            curRank = 0;\n            for ( j = 0; j < l; j++ ) {\n              if ( response.rankings[j].pv > response.rankings[i].pv ) {\n                curRank++;\n              } else {\n                break;\n              }\n            }\n            response.rankings[i].rank = curRank + 1;\n          }\n          self.rankings = response.rankings;\n          // Create graph\n          var chartData = {};\n          var labels = self.filledLabels( response.start, response.end );\n          var data_sets = {};\n          $.each( response.records, function(index, record){\n            self.fillDataSet(data_sets, labels, record.post_type, record.date, record.pv);\n          });\n\n          chartData.labels = labels;\n          chartData.datasets = [];\n          var colors = [\n            [255, 12, 62],\n            [0, 153, 232],\n            [247, 124, 0],\n            [95, 125, 140],\n            [52, 143, 55],\n            [255, 59, 0],\n            [124, 19, 164],\n            [68, 90, 101],\n            [0, 184, 214],\n            [110, 76, 64]\n          ];\n          var colorIndex = 0;\n          for(var prop in data_sets){\n            if(!data_sets.hasOwnProperty(prop)) {\n              continue;\n            }\n            var color = colors[colorIndex].join(', ');\n            chartData.datasets.push({\n              type: 'line',\n              lineTension: 0,\n              label: prop,\n              data: data_sets[prop],\n              backgroundColor: 'rgb(' + color + ')',\n              borderColor: 'rgba(' + color + ', .6)'\n            });\n            colorIndex++;\n          }\n          self.chartData = chartData;\n          self.records = response.records;\n        }).fail($.hbRestError()).always(function(){\n          self.loading = false;\n        })\n      }\n    }\n  } );\n\n\n})(jQuery);\n"]}