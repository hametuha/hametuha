{"version":3,"sources":["components/user-tag.js"],"names":["$","Hametuha","models","userTag","Backbone","Model","extend","defaults","me","name","taxonomy_id","url","number","collections","tagCollection","Collection","views","Tag","View","tagName","events","click i","initialize","_","bindAll","this","model","bind","render","$el","html","get","attr","addClass","removeClass","clickHandler","e","preventDefault","stopPropagation","self","ajax","HametuhaUserTag","tagRemove","tagAdd","type","dataType","data","success","result","tag","set","remove","destroy","alert","message","error","TagManager","el","collection","tagList","post_id","submit #user-tag-editor","find","each","grepItem","appendItem","watchCollectionCount","index","a","hasClass","add","length","setElement","append","submitTag","input","target","term","val","tagCreate","exists","newTag","prop","document","ready","autocomplete","source","tagSearch","minLength","delay","select","ui","item","label","submit","jQuery"],"mappings":"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","file":"components/user-tag.js","sourcesContent":["/**\n * Description\n */\n\n/*global Hametuha: true*/\n/*global Backbone: true*/\n/*global _: true*/\n/*global HametuhaUserTag: true*/\n\n(function ($) {\n    'use strict';\n\n    /**\n     * タグオブジェクト\n     *\n     * @type {Hametuha.models.userTag}\n     */\n    Hametuha.models.userTag = Backbone.Model.extend(\n        /**\n         * @lends {Hametuha.models.userTag}\n         */\n        {\n            defaults: {\n                me: false,\n                name: '',\n                taxonomy_id: 0,\n                url: '',\n                number: 0\n            }\n        }\n    );\n\n    /**\n     * タグコレクション\n     *\n     * @type {Hametuha.collections.tagCollection}\n     */\n    Hametuha.collections.tagCollection = Backbone.Collection.extend(\n        /**\n         * @lends {Hametuha.collections.tagCollection}\n         */\n        {\n            models: Hametuha.models.userTag\n        }\n    );\n\n    /**\n     * タグボタン\n     *\n     * @type {Hametuha.views.Tag}\n     */\n    Hametuha.views.Tag = Backbone.View.extend(\n        /**\n         * @lends {Hametuha.views.Tag}\n         */\n        {\n            tagName: 'a',\n\n            events: {\n                'click i': 'clickHandler'\n            },\n\n            initialize: function(){\n                _.bindAll(this, 'render', 'clickHandler');\n                this.model.bind('change', this.render);\n            },\n\n            render: function(){\n                this.$el.html(\n                    this.model.get('name') +\n                    '(' + (this.model.get('number') > 100 ? '100+' : this.model.get('number')) + ')' +\n                    '<i></i>'\n                );\n                this.$el.attr('href', this.model.get('url'))\n                    .attr('data-taxonomy-id', this.model.get('taxonomy_id'))\n                    .attr('data-term', this.model.get('name'))\n                    .attr('data-number', this.model.get('number'));\n                if( this.model.get('me') ){\n                    this.$el.addClass('me');\n                }else{\n                    this.$el.removeClass('me');\n                }\n                return this;\n            },\n\n            /**\n             * Update tag\n             *\n             * @param {Event} e\n             * @returns {boolean}\n             */\n            clickHandler: function(e){\n                e.preventDefault();\n                e.stopPropagation();\n                var self = this;\n                $.ajax(this.model.get('me') ? HametuhaUserTag.tagRemove : HametuhaUserTag.tagAdd, {\n                    type: 'POST',\n                    dataType: 'json',\n                    data: {\n                        taxonomy_id: this.model.get('taxonomy_id')\n                    },\n                    success: function(result){\n                        if( result.success ){\n                            if( result.tag ){\n                                self.model.set(result.tag);\n                            }else{\n                                self.$el.remove();\n                                self.model.destroy();\n                            }\n                        }else{\n                            Hametuha.alert(result.message, true);\n                        }\n                    },\n                    error: function(){\n                        Hametuha.alert('タグを更新できませんした。', true);\n                    }\n                });\n                return false;\n            }\n        }\n    );\n\n\n    /**\n     * タグマネージャー\n     *\n     * @type {Hametuha.views.TagManager}\n     */\n    Hametuha.views.TagManager = Backbone.View.extend(\n        /**\n         * @lends {Hametuha.views.TagManager}\n         */\n        {\n            el: '#post-tags',\n\n            /**\n             * @type {Backbone.Collection}\n             */\n            collection: null,\n\n            tagList: null,\n\n            post_id: 0,\n\n            events: {\n                'submit #user-tag-editor': 'submitTag'\n            },\n\n            initialize: function(){\n                _.bindAll(this, 'grepItem', 'appendItem', 'watchCollectionCount', 'submitTag');\n                this.tagList = $('#user-tag-list');\n                this.post_id = this.tagList.attr('data-post-id');\n                // コレクションを初期化\n                this.collection = new Hametuha.collections.tagCollection();\n                this.tagList.find('a').each(this.grepItem);\n                this.collection.bind('add', this.appendItem);\n                // コレクションをリッスン\n                this.collection.bind('remove', this.watchCollectionCount);\n            },\n\n            /**\n             * 現在表示されているタグを探してコレクションに追加\n             * @param {Number} index\n             * @param {Object} a\n             */\n            grepItem: function(index, a){\n                var model = new Hametuha.models.userTag();\n                model.set({\n                    me: $(a).hasClass('me'),\n                    name: $(a).attr('data-term'),\n                    taxonomy_id: $(a).attr('data-taxonomy-id'),\n                    url: $(a).attr('href'),\n                    number: $(a).attr('data-number')\n                });\n                this.collection.add(model);\n                this.appendItem(model);\n            },\n\n            /**\n             * Append tag element\n             *\n             * @param model\n             */\n            appendItem: function(model){\n                var tag = new Hametuha.views.Tag({\n                        model: model\n                    }),\n                    a = this.$el.find('a[data-taxonomy-id=' + model.get('taxonomy_id') + ']');\n                if( a.length ){\n                    // Existing element.\n                    tag.setElement(a.get(0));\n                }else{\n                    // New element.\n                    this.tagList.append(tag.render().$el);\n                    this.watchCollectionCount();\n                }\n            },\n\n            /**\n             * タグリストにクラスを追加する\n             */\n            watchCollectionCount: function(){\n                if( this.collection.length ){\n                    this.tagList.removeClass('no-tag');\n                }else{\n                    this.tagList.addClass('no-tag');\n                }\n            },\n\n            /**\n             * タグフォーム送信\n             *\n             * @param e\n             * @returns {boolean}\n             */\n            submitTag: function(e){\n                var input = $(e.target).find('input[type=text]'),\n                    term = input.val(),\n                    self = this;\n                if( term.length ){\n                    $.ajax(HametuhaUserTag.tagCreate, {\n                        type: 'POST',\n                        dataType: 'json',\n                        data: {\n                            term: term\n                        },\n                        success: function(result){\n                            if( result.success ){\n                                var exists = false;\n                                self.collection.each(function(model){\n                                    if( model.get('taxonomy_id') === result.tag.taxonomy_id ){\n                                        exists = true;\n                                        model.set(result.tag);\n                                    }\n                                });\n                                if( !exists ){\n                                    var newTag = new Hametuha.models.userTag();\n                                    newTag.set(result.tag);\n                                    self.collection.add(newTag);\n                                }\n                            }else{\n                                Hametuha.alert(result.message, true);\n                            }\n                            input.val('');\n                            $(e.target).find('input[type=submit]').prop('disabled', false);\n                        },\n                        error: function(){\n                            $(e.target).find('input[type=submit]').prop('disabled', false);\n                            Hametuha.alert('タグを追加できませんした。', true);\n                        }\n                    });\n                }\n                return false;\n            }\n        }\n    );\n\n\n\n    $(document).ready(function(){\n        // オートコンプリート\n        $('input[type=text]', '#user-tag-editor').autocomplete({\n            source: HametuhaUserTag.tagSearch,\n            minLength: 1,\n            delay: 500,\n            select: function(e, ui){\n                if(ui.item && ui.item.label){\n                    $('#user-tag-editor').submit();\n                }\n            }\n        });\n        // ビューを初期化\n        new Hametuha.views.TagManager();\n    });\n\n})(jQuery);\n"],"sourceRoot":"/source/"}