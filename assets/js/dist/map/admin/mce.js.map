{"version":3,"sources":["admin/mce.js"],"names":["tinymce","PluginManager","add","editor","url","applyStyle","d","css","style","getElementById","createElement","type","id","getElementsByTagName","appendChild","console","log","innerHTML","needIndent","node","test","textContent","setP","e","dom","selectors","nodes","doc","body","childNodes","i","l","length","nodeName","push","index","children","j","k","join","on"],"mappings":"AAMAA,QAAQC,cAAcC,IAAI,WAAY,SAASC,EAAQC,GAQnD,QAASC,GAAWC,EAAGC,GACnB,GAAIC,IACEA,EAAQF,EAAEG,eAAe,mBAC3BD,EAAQF,EAAEI,cAAc,SACxBF,EAAMG,KAAO,WACbH,EAAMI,GAAK,eACXN,EAAEO,qBAAqB,QAAQ,GAAGC,YAAYN,IAElDO,QAAQC,IAAIR,GACZA,EAAMS,UAAYV,EAStB,QAASW,GAAWC,GAChB,OAAS,wBAAwBC,KAAKD,EAAKE,aAQ/C,QAASC,GAAKC,GAIV,IAAK,GAHDC,GAAMrB,EAAOqB,IACbC,KACAC,EAAQF,EAAIG,IAAIC,KAAKC,WAChBC,EAAI,EAAGC,EAAIL,EAAMM,OAAYD,EAAJD,EAAOA,IACrC,OAAQJ,EAAMI,GAAGG,UACb,IAAK,IACIf,EAAWQ,EAAMI,KAClBL,EAAUS,KAAK,uBAAyBJ,EAAI,GAAK,IAErD,MACJ,KAAK,cACD,SAAUX,EAAMgB,GAEZ,IAAK,GADDC,GAAWjB,EAAKU,WACXQ,EAAI,EAAGC,EAAIF,EAASJ,OAAYM,EAAJD,EAAOA,IACpC,MAAQD,EAASC,GAAGJ,UAAaf,EAAWkB,EAASC,KACrDZ,EAAUS,KAAK,gCAAkCC,EAAQ,GAAK,oBAAuBE,EAAI,GAAM,MAGxGX,EAAMI,GAAIA,GAOrBL,EAAUO,QACV3B,EAAWmB,EAAIG,IAAKF,EAAUc,KAAK,KAAO,qBAKlDpC,EAAOqC,GAAG,OAAQlB,GAClBnB,EAAOqC,GAAG,SAAUlB","file":"admin/mce.js","sourcesContent":["/**\n * Description\n */\n\n/*global tinymce: true*/\n\ntinymce.PluginManager.add('hametuha', function(editor, url) {\n\n    /**\n     * Apply CSS to TinyMCE editor\n     *\n     * @param {Document} d\n     * @param {String} css\n     */\n    function applyStyle(d, css){\n        var style;\n        if( !(style = d.getElementById('hametuha-mce')) ){\n            style = d.createElement('style');\n            style.type = 'text/css';\n            style.id = 'hametuha-mce';\n            d.getElementsByTagName('head')[0].appendChild(style);\n        }\n        console.log(style);\n        style.innerHTML = css;\n    }\n\n    /**\n     * Detect if this element requires indent\n     *\n     * @param {Object} node\n     * @return {Boolean}\n     */\n    function needIndent(node){\n        return !(/^[ 　【】《〔〝『「（”\"'’\\(\\)]/.test(node.textContent));\n    }\n\n    /**\n     * Set auto indent\n     *\n     * @param {Object} e\n     */\n    function setP(e){\n        var dom = editor.dom,\n            selectors = [],\n            nodes = dom.doc.body.childNodes;\n        for( var i = 0, l = nodes.length; i < l; i++ ){\n            switch( nodes[i].nodeName ){\n                case 'P':\n                    if( !needIndent(nodes[i]) ){\n                        selectors.push('body > p:nth-child(' + (i + 1) + ')')\n                    }\n                    break;\n                case 'BLOCKQUOTE':\n                    (function(node, index){\n                        var children = node.childNodes;\n                        for( var j = 0, k = children.length; j < k; j++ ){\n                            if( 'P' === children[j].nodeName && !needIndent(children[j]) ){\n                                selectors.push('body > blockquote:nth-child(' + (index + 1) + ') > p:nth-child(' + ( j + 1 ) + ')');\n                            }\n                        }\n                    })(nodes[i], i);\n                    break;\n                default:\n                    // Do nothing\n                    break;\n            }\n        }\n        if( selectors.length ){\n            applyStyle(dom.doc, selectors.join(',') + '{text-indent: 0;}')\n        }\n    }\n\n    // Add event listener\n    editor.on('init', setP);\n    editor.on('change', setP);\n\n});\n\n"],"sourceRoot":"/source/"}