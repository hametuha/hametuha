AWSTemplateFormatVersion: '2010-09-09'
Description: 'Hametuha WordPress Production Server - Configurable PHP & WordPress 6.8'

# =============================================================================
# CLOUDFORMATION TEMPLATE STRUCTURE
# =============================================================================
# 1. Parameters    - 設定可能な値（PHPバージョン、インスタンスタイプ等）
# 2. Conditions    - 条件分岐（新規SG作成、Elastic IP紐付け等）  
# 3. Resources     - AWSリソース定義
#    - Security Group (条件付き作成)
#    - IAM Role & Instance Profile  
#    - Launch Template (UserData含む)
#    - EC2 Instance
#    - Elastic IP Association (条件付き)
# 4. Outputs       - 作成されたリソースの情報
# =============================================================================

# =============================================================================
# 1. PARAMETERS - デプロイ時に設定可能な値
# =============================================================================

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [staging, production]
    Description: Environment name
  
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge]
    Description: EC2 instance type
  
  PhpVersion:
    Type: String
    Default: "8.2"
    AllowedValues: ["8.1", "8.2", "8.3", "8.4"]
    Description: PHP version to install
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair for SSH access
  
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where instance will be created
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for EC2 instance
  
  ExistingSecurityGroupId:
    Type: String
    Description: Existing Security Group ID to attach
    Default: ""
  
  ExistingElasticIPAllocation:
    Type: String
    Description: Existing Elastic IP Allocation ID (optional)
    Default: ""

  ElastiCacheEndpoint:
    Type: String
    Description: ElastiCache Memcached endpoint URL with port
    Default: "hametuhaobjectcache.bogjkp.0001.apne1.cache.amazonaws.com:11211"

# =============================================================================
# 2. CONDITIONS - 条件分岐ロジック
# =============================================================================

Conditions:
  CreateNewSecurityGroup: !Equals [!Ref ExistingSecurityGroupId, ""]
  AttachElasticIP: !Not [!Equals [!Ref ExistingElasticIPAllocation, ""]]

# =============================================================================
# 3. RESOURCES - AWSリソース定義
# =============================================================================

Resources:
  # Security Group (if not provided)
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNewSecurityGroup
    Properties:
      GroupDescription: Security group for Hametuha web server
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-hametuha-sg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: hametuha

  # IAM Role for EC2 instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-hametuha-ec2-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: HametuhaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub "arn:aws:s3:::hametuha-${Environment}-backups/*"
                  - !Sub "arn:aws:s3:::hametuha-${Environment}-uploads/*"

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${Environment}-hametuha-instance-profile"
      Roles:
        - !Ref EC2Role

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-hametuha-template"
      LaunchTemplateData:
        # Ubuntu 22.04 LTS AMI (ap-northeast-1)
        # 最新AMIは以下で確認: aws ec2 describe-images --owners 099720109477 --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"
        ImageId: ami-0d88b56ff2c65082e  # Ubuntu 22.04 LTS (2025-08-22)
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !If 
            - CreateNewSecurityGroup
            - !Ref WebServerSecurityGroup
            - !Ref ExistingSecurityGroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # ログ設定
            exec > >(tee /var/log/user-data.log)
            exec 2>&1
            
            # 変数設定
            ENVIRONMENT=${Environment}
            WEB_ROOT="/var/www/vhosts/hametuha.com"
            
            echo "=== Hametuha ${Environment} Server Setup Started ==="
            
            # システム更新
            apt-get update
            apt-get upgrade -y
            
            # セキュリティ自動更新の設定
            apt-get install -y unattended-upgrades
            cat > /etc/apt/apt.conf.d/20auto-upgrades <<EOF
            APT::Periodic::Update-Package-Lists "1";
            APT::Periodic::Unattended-Upgrade "1";
            EOF
            
            # 基本パッケージ（Java含む）
            apt-get install -y git vim htop curl wget unzip openjdk-11-jdk-headless
            
            # =============================================================================
            # PHP 8.2インストール（Ubuntu 22.04パッケージ）
            # =============================================================================
            # 新しいパッケージを追加する場合は、以下のセクションに追加してください
            # 利用可能なPHP拡張: apt list --installed | grep php で確認可能
            # =============================================================================
            
            apt-get install -y \
                php${PhpVersion} \
                php${PhpVersion}-fpm \
                php${PhpVersion}-cli \
                php${PhpVersion}-common \
                php${PhpVersion}-mysql \
                php${PhpVersion}-mbstring \
                php${PhpVersion}-xml \
                php${PhpVersion}-gd \
                php${PhpVersion}-zip \
                php${PhpVersion}-intl \
                php${PhpVersion}-opcache \
                php${PhpVersion}-bcmath \
                php${PhpVersion}-dev
            
            # WordPress推奨ミドルウェアを追加
            # ImageMagick 7系（AVIF, HEIF対応を含む）
            apt-get install -y \
                imagemagick \
                libmagickwand-dev \
                libmagickcore-6.q16-6-extra \
                libavif-bin \
                libheif1 \
                libheif-dev
            
            # その他のWordPress推奨パッケージ
            apt-get install -y \
                ffmpeg \
                ghostscript \
                libgs-dev
            
            # libmemcachedとコンパイルツールをインストール
            apt-get install -y libmemcached-dev build-essential
            
            # Memcached拡張をPECLでインストール
            printf "\n" | pecl install memcached
            
            # Memcached拡張を有効化
            echo "extension=memcached.so" > /etc/php/${PhpVersion}/mods-available/memcached.ini
            phpenmod memcached
            
            # Nginxインストール
            apt-get install -y nginx
            
            # ubuntuユーザーでComposerをインストール（セキュリティ向上）
            sudo -u ubuntu bash <<'UBUNTU_USER_SETUP'
            export HOME=/home/ubuntu
            export COMPOSER_HOME=/home/ubuntu/.composer
            
            # Composerインストール
            curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
            php /tmp/composer-setup.php --install-dir=/home/ubuntu/bin --filename=composer
            rm -f /tmp/composer-setup.php
            chmod +x /home/ubuntu/bin/composer
            
            # WP-CLIインストール
            mkdir -p /home/ubuntu/bin
            curl -sS https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /home/ubuntu/bin/wp
            chmod +x /home/ubuntu/bin/wp
            UBUNTU_USER_SETUP
            
            # Webドキュメントルート作成（ubuntuユーザーの所有とし、www-dataグループでアクセス可能に）
            mkdir -p $$WEB_ROOT
            chown -R ubuntu:www-data /var/www/vhosts
            chmod -R 755 /var/www/vhosts
            
            # ubuntuユーザーのPATHに~/binを追加
            echo 'export PATH="$$HOME/bin:$$PATH"' >> /home/ubuntu/.bashrc
            
            # PHP設定
            cat > /etc/php/${PhpVersion}/conf.d/99-hametuha.ini <<EOF
            memory_limit = 512M
            max_execution_time = 300
            max_input_time = 300
            post_max_size = 64M
            upload_max_filesize = 64M
            max_file_uploads = 20
            date.timezone = Asia/Tokyo
            
            ; OPcache
            opcache.enable=1
            opcache.memory_consumption=256
            opcache.interned_strings_buffer=16
            opcache.max_accelerated_files=10000
            opcache.revalidate_freq=2
            opcache.save_comments=1
            EOF
            
            # ディレクトリ作成（ubuntuユーザーベース）
            mkdir -p /home/ubuntu/var/log/php-fpm/${PhpVersion}
            mkdir -p /home/ubuntu/var/lib/php/${PhpVersion}/wsdlcache
            mkdir -p /home/ubuntu/var/log/cron
            chown -R ubuntu:www-data /home/ubuntu/var
            
            # PHP-FPM設定（Ubuntu用に修正）
            cat > /etc/php/${PhpVersion}/fpm/pool.d/www.conf <<EOF
            [www]
            user = ubuntu
            group = www-data
            listen = /var/run/php/php${PhpVersion}-fpm.sock
            listen.owner = www-data
            listen.group = www-data
            listen.mode = 0660
            pm = dynamic
            pm.max_children = 20
            pm.start_servers = 5
            pm.min_spare_servers = 5
            pm.max_spare_servers = 10
            slowlog = /home/ubuntu/var/log/php-fpm/${PhpVersion}/www-slow.log
            request_slowlog_timeout = 5s
            catch_workers_output = yes
            php_admin_value[error_log] = /home/ubuntu/var/log/php-fpm/${PhpVersion}/www-error.log
            php_admin_flag[log_errors] = on
            php_value[session.save_handler] = memcached
            php_value[session.save_path] = ${ElastiCacheEndpoint}
            php_value[soap.wsdl_cache_dir] = /home/ubuntu/var/lib/php/${PhpVersion}/wsdlcache
            EOF
            
            # Nginx基本設定
            cat > /etc/nginx/nginx.conf <<EOF
            user nginx;
            worker_processes auto;
            error_log /var/log/nginx/error.log;
            pid /run/nginx.pid;
            
            events {
                worker_connections 1024;
                use epoll;
            }
            
            http {
                log_format main '$$remote_addr - $$remote_user [$$time_local] "$$request" '
                                '$$status $$body_bytes_sent "$$http_referer" '
                                '"$$http_user_agent" "$$http_x_forwarded_for"';
                
                access_log /var/log/nginx/access.log main;
                
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;
                client_max_body_size 64M;
                
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                gzip on;
                gzip_vary on;
                gzip_min_length 1000;
                gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
                
                include /etc/nginx/conf.d/*.conf;
            }
            EOF
            
            # WordPress用Nginx設定
            cat > /etc/nginx/conf.d/hametuha.conf <<EOF
            server {
                listen 80;
                server_name hametuha.com www.hametuha.com;
                root $$WEB_ROOT;
                index index.php;
                
                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
                
                # WordPress pretty permalinks
                location / {
                    try_files $$uri $$uri/ /index.php?$$args;
                }
                
                # PHP処理
                location ~ \.php$ {
                    try_files $$uri =404;
                    fastcgi_split_path_info ^(.+\.php)(/.+)$;
                    fastcgi_pass unix:/var/run/php/php${PhpVersion}-fpm.sock;
                    fastcgi_index index.php;
                    include fastcgi_params;
                    fastcgi_param SCRIPT_FILENAME $$document_root$$fastcgi_script_name;
                    fastcgi_param PATH_INFO $$fastcgi_path_info;
                    fastcgi_read_timeout 300;
                }
                
                # 静的ファイルのキャッシュ
                location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2)$ {
                    expires 1M;
                    add_header Cache-Control "public, immutable";
                }
                
                # wp-config.phpなどの保護
                location ~ /\. {
                    deny all;
                }
                
                location ~ wp-config\.php {
                    deny all;
                }
            }
            EOF
            
            # サービス起動
            systemctl enable php${PhpVersion}-fpm nginx
            systemctl start php${PhpVersion}-fpm nginx
            
            # CloudWatch Agentインストールと設定
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i amazon-cloudwatch-agent.deb
            
            # CloudWatch Agent設定
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<EOF
            {
                "agent": {
                    "run_as_user": "cwagent"
                },
                "logs": {
                    "logs_collected": {
                        "files": {
                            "collect_list": [
                                {
                                    "file_path": "/var/log/nginx/access.log",
                                    "log_group_name": "/aws/ec2/hametuha/nginx/access",
                                    "log_stream_name": "{instance_id}",
                                    "timezone": "Asia/Tokyo"
                                },
                                {
                                    "file_path": "/var/log/nginx/error.log",
                                    "log_group_name": "/aws/ec2/hametuha/nginx/error",
                                    "log_stream_name": "{instance_id}",
                                    "timezone": "Asia/Tokyo"
                                },
                                {
                                    "file_path": "/home/ubuntu/var/log/php-fpm/${PhpVersion}/www-error.log",
                                    "log_group_name": "/aws/ec2/hametuha/php/error",
                                    "log_stream_name": "{instance_id}",
                                    "timezone": "Asia/Tokyo"
                                },
                                {
                                    "file_path": "/var/www/vhosts/hametuha.com/wp-content/debug.log",
                                    "log_group_name": "/aws/ec2/hametuha/wordpress/debug",
                                    "log_stream_name": "{instance_id}",
                                    "timezone": "Asia/Tokyo"
                                }
                            ]
                        }
                    }
                },
                "metrics": {
                    "namespace": "CWAgent",
                    "metrics_collected": {
                        "cpu": {
                            "measurement": [
                                "cpu_usage_idle",
                                "cpu_usage_iowait",
                                "cpu_usage_system",
                                "cpu_usage_user"
                            ],
                            "metrics_collection_interval": 60
                        },
                        "disk": {
                            "measurement": [
                                "used_percent"
                            ],
                            "metrics_collection_interval": 60,
                            "resources": [
                                "*"
                            ]
                        },
                        "diskio": {
                            "measurement": [
                                "io_time"
                            ],
                            "metrics_collection_interval": 60,
                            "resources": [
                                "*"
                            ]
                        },
                        "mem": {
                            "measurement": [
                                "mem_used_percent"
                            ],
                            "metrics_collection_interval": 60
                        }
                    }
                }
            }
            EOF
            
            # ePubチェッカーのセットアップ
            mkdir -p /usr/local/bin/epubcheck
            # ePubチェッカーは手動でアップロードが必要
            
            # Cronタスクの設定（ec2-userで実行）
            cat > /tmp/hametuha-crontab <<EOF
            * * * * * cd /var/www/vhosts/hametuha.com; php /var/www/vhosts/hametuha.com/wp-cron.php 2> /home/ec2-user/var/log/cron/cron.log
            5 2 * * * cd /var/www/vhosts/hametuha.com; /usr/local/bin/wp haranking save_daily_pv 2> /home/ec2-user/var/log/cron/cron.log
            5 3 * * * cd /var/www/vhosts/hametuha.com; /usr/local/bin/wp hamenew update_pv 2> /home/ec2-user/var/log/cron/cron.log
            5 4 25 * * cd /var/www/vhosts/hametuha.com; /usr/local/bin/wp sales kdp 2> /home/ec2-user/var/log/cron/cron.log
            25 4 25 * * cd /var/www/vhosts/hametuha.com; /usr/local/bin/wp sales news 2> /home/ec2-user/var/log/cron/cron.log
            EOF
            crontab -u ec2-user /tmp/hametuha-crontab
            
            # awslogsサービス（現在の設定に合わせる）
            dnf install -y awslogs
            
            # awslogs設定
            cat > /etc/awslogs/awslogs.conf <<EOF
            [general]
            state_file = /var/lib/awslogs/agent-state
            
            [/var/log/php-fpm/www-error.log]
            datetime_format = [%d-%b-%Y %H:%M:%S UTC]
            time_zone = UTC
            file = /home/ec2-user/var/log/php-fpm/8.2/www-error.log
            log_stream_name = hametuha_{instance_id}
            initial_position = start_of_file
            log_group_name = /var/log/php-fpm/www-error
            multi_line_start_pattern = {datetime_format}
            buffer_duration = 5000
            
            [/var/log/php-fpm/www-slow.log]
            datetime_format = [%d-%b-%Y %H:%M:%S]
            time_zone = UTC
            file = /home/ec2-user/var/log/php-fpm/8.2/www-slow.log
            log_stream_name = hametuha_{instance_id}
            initial_position = start_of_file
            log_group_name = /var/log/php-fpm/www-slow
            multi_line_start_pattern = {datetime_format}
            buffer_duration = 5000
            
            [/var/log/nginx/access.log]
            datetime_format = %d/%b/%Y:%H:%M:%S %z
            time_zone = UTC
            file = /var/log/nginx/access.log
            log_stream_name = hametuha_{instance_id}
            initial_position = start_of_file
            log_group_name = /var/log/nginx
            multi_line_start_pattern = {datetime_format}
            buffer_duration = 5000
            EOF
            
            cat > /etc/awslogs/awscli.conf <<EOF
            [plugins]
            cwlogs = cwlogs
            [default]
            region = ap-northeast-1
            EOF
            
            # awslogsサービス開始
            systemctl enable awslogsd
            systemctl start awslogsd
            
            # 完了通知
            echo "=== Hametuha ${Environment} Server Setup Completed ==="
            echo "PHP Version: $$(php -v | head -n1)"
            echo "Nginx Version: $$(nginx -v 2>&1)"
            echo "WP-CLI Version: $$(wp --version 2>/dev/null || echo 'Not available')"
            
            # CloudFormation通知用の関数
            send_cfn_signal() {
                if [ -z "$$1" ]; then
                    local status=0
                else
                    local status="$$1"
                fi
                echo "Sending CloudFormation signal with status: $$status" >> /var/log/setup.log
                
                # Amazon Linux 2023 では cfn-bootstrap がプリインストール
                if command -v cfn-signal >/dev/null 2>&1; then
                    cfn-signal -e $$status --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
                    echo "cfn-signal sent successfully" >> /var/log/setup.log
                else
                    echo "ERROR: cfn-signal command not found" >> /var/log/setup.log
                    # AWS CLI を使って代替手段
                    aws cloudformation signal-resource \
                        --stack-name ${AWS::StackName} \
                        --logical-resource-id EC2Instance \
                        --unique-id $$(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
                        --status SUCCESS \
                        --region ${AWS::Region} \
                        >> /var/log/setup.log 2>&1
                fi
            }
            
            # 成功シグナル送信
            send_cfn_signal 0
            echo "Setup script completed successfully" >> /var/log/setup.log
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${Environment}-hametuha-server"
              - Key: Environment
                Value: !Ref Environment
              - Key: Application
                Value: hametuha
              - Key: ManagedBy
                Value: CloudFormation
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${Environment}-hametuha-server-volume"
              - Key: Environment
                Value: !Ref Environment

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-hametuha-server"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: hametuha

  # Elastic IP Association (if provided)
  ElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: AttachElasticIP
    Properties:
      AllocationId: !Ref ExistingElasticIPAllocation
      InstanceId: !Ref EC2Instance

# =============================================================================
# 4. OUTPUTS - 作成されたリソースの情報を出力
# =============================================================================

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "${Environment}-hametuha-instance-id"
  
  PrivateIP:
    Description: Private IP address of the instance
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: !Sub "${Environment}-hametuha-private-ip"
  
  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub "${Environment}-hametuha-public-ip"
  
  LaunchTemplateId:
    Description: Launch Template ID
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${Environment}-hametuha-launch-template"